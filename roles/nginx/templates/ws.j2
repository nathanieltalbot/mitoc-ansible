upstream {{ django_application_name }}_wsgi_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:{{ django_virtualenv_path }}/run/gunicorn.sock fail_timeout=0;
}

server {
    listen      80;
    server_name {{ nginx_server_name }};
    server_tokens off;
    return 301  https://$server_name$request_uri;
}

server {
    listen              443 ssl;
    server_name         {{ nginx_server_name }};
    server_tokens off;
    ssl_certificate     {{ nginx_ssl_dest_dir }}/{{ root_name }}.crt;
    ssl_certificate_key {{ nginx_ssl_dest_dir }}/{{ root_name }}.key;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers on;
    ssl_session_timeout  10m;
    ssl_session_cache shared:SSL:10m;
    ssl_ecdh_curve secp384r1;
    ssl_stapling on;
    ssl_stapling_verify on;
    {% if nginx_strong_dh_group %}
    ssl_dhparam          /etc/ssl/certs/dhparams.pem;
    {% endif %}

    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; ";

    # Everything before `default-src` is not handled by that default fallback
    # - base-uri: Prevent hijacking a `base` tag
    # - form-action: Prevents forms being submitted to another host
    # - frame-ancestors: anti-clickjacking
    #
    # Everything after `default-src` is the standard Content-Security Policy, used to
    # disallow all content with the exception of:
    # - Scripts served locally, inline, or on known CDN's
    # - XHR's either locally, or to Sentry
    # - Remote images (so long as they're over HTTPS)
    # - Local fonts
    add_header Content-Security-Policy "base-uri 'self'; form-action 'self' https://na2.docusign.net/ https://shopmitprd.mit.edu/; frame-ancestors 'none'; default-src 'none'; font-src 'self' https://fonts.gstatic.com; connect-src 'self' https://sentry.io; img-src https:; style-src 'self' 'unsafe-inline'; script-src https://cdn.jsdelivr.net/ 'self' 'unsafe-inline' 'unsafe-eval'";

    # There's no need to make use of the user's microphone, location, etc.
    # (The Feature-Policy header doesn't suport blacklisting everything by default, so we must explicitly set none)
    add_header Feature-Policy "accelerometer 'none'; ambient-light-sensor 'none'; autoplay 'none'; camera 'none'; encrypted-media 'none'; fullscreen 'none'; geolocation 'none'; gyroscope 'none'; magnetometer 'none'; microphone 'none'; midi 'none'; payment 'none'; picture-in-picture 'none'; speaker 'none'; usb 'none'; vr 'none';";

    # Prevent MIME type sniffing for security
    add_header X-Content-Type-Options "nosniff";

    # Enable XSS protection in case user's browser has disabled it
    add_header X-XSS-Protection "1; mode=block";

    # Prevent loading in a frame (clickjacking defense (`frame-ancestors` of CSP has the same effect)
    add_header X-Frame-Options "DENY";

    # Don't leak referrerring URL when following external links
    # (Django's CSRF validation requires referral info for forms to work)
    add_header Referrer-Policy "same-origin";

    client_max_body_size 4G;

    access_log {{ nginx_access_log_file }};
    error_log {{ nginx_error_log_file }};

    location /static/ {
        alias   {{ nginx_static_dir }};
        gzip_static on;
        expires     max;
        add_header  Cache-Control public;
        add_header  Last-Modified "";
        add_header  ETag "";
    }

    location /media/ {
        alias   {{ nginx_media_dir }};
    }

    location / {
        if (-f {{ django_virtualenv_path }}/maintenance_on.html) {
            return 503;
        }

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Host $http_host;
        proxy_redirect off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://{{ django_application_name }}_wsgi_server;
            break;
        }
    }

    # Error pages
    error_page 500 502 504 /500.html;
    location = /500.html {
        root {{ project_path }}/{{ django_application_name }}/templates/;
    }

    error_page 503 /maintenance_on.html;
    location = /maintenance_on.html {
        root {{ django_virtualenv_path }}/;
    }
}
